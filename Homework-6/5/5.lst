     1                                  section .data
     2 00000000 4E756D62657220796F-     	even: db "Number you enter is even", 10
     3 00000009 7520656E7465722069-
     4 00000012 73206576656E0A     
     5                                  	even_len equ $-even
     6                                  
     7 00000019 4E756D62657220796F-     	odd: db "Number you enter is odd", 10
     8 00000022 7520656E7465722069-
     9 0000002B 73206F64640A       
    10                                  	odd_len equ $-odd
    11                                  section .bss
    12 00000000 <res 0000000A>          	read: resb 10
    13                                  section .text
    14                                  	global _start
    15                                  _start:
    16 00000000 B803000000              	mov eax, 3
    17 00000005 BB00000000              	mov ebx, 0
    18 0000000A B9[00000000]            	mov ecx, read
    19 0000000F BA03000000              	mov edx, 3
    20 00000014 CD80                    	int 80H
    21                                  
    22 00000016 8A0425[01000000]        	mov byte al, [read + 1]
    23                                  
    24 0000001D D0E8                    	shr al, 1
    25 0000001F 721A                    	jc .odd
    26 00000021 EB00                    	jmp .even
    27                                  
    28                                  .even:
    29 00000023 B804000000              	mov eax, 4
    30 00000028 BB01000000              	mov ebx, 1
    31 0000002D B9[00000000]            	mov ecx, even
    32 00000032 BA19000000              	mov edx, even_len
    33 00000037 CD80                    	int 80H
    34                                  	
    35 00000039 EB18                    	jmp .exit
    36                                  
    37                                  .odd:
    38 0000003B B804000000              	mov eax, 4
    39 00000040 BB01000000              	mov ebx, 1
    40 00000045 B9[19000000]            	mov ecx, odd
    41 0000004A BA18000000              	mov edx, odd_len
    42 0000004F CD80                    	int 80H
    43                                  
    44 00000051 EB00                    	jmp .exit
    45                                  
    46                                  .exit:
    47 00000053 B801000000              	mov eax, 1
    48 00000058 BB00000000              	mov ebx, 0
    49 0000005D CD80                    	int 80H
